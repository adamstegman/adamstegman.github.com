{"version":3,"sources":["webpack:///./src/components/Footer/index.module.css","webpack:///./src/assets/adamstegman.jpg","webpack:///./src/components/Footer/index.js","webpack:///./src/components/Layout/index.js","webpack:///./src/pages/index.js","webpack:///./src/pages/index.module.css"],"names":["module","exports","Footer","className","styles","footer","logo","Container","h2","navList","navItem","href","navLink","rel","TemplateWrapper","children","query","render","data","title","site","siteMetadata","meta","name","content","description","Header","propTypes","PropTypes","any","IndexPage","Layout","src","profilePic","width","alt"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,OAAS,sFAAsF,KAAO,sDAAsD,GAAK,2DAA2D,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kI,qBCD5UD,EAAOC,QAAU,IAA0B,2D,uNC+B5BC,EAzBA,kBACb,4BAAQC,UAAWC,IAAOC,QACxB,kBAAC,IAAD,CAAMF,UAAWC,IAAOE,OACxB,kBAACC,EAAA,EAAD,KACE,wBAAIJ,UAAWC,IAAOI,IAAtB,WACA,6BACE,wBAAIL,UAAWC,IAAOK,SACpB,wBAAIN,UAAWC,IAAOM,SACpB,uBAAGC,KAAK,4BAA4BR,UAAWC,IAAOQ,SAAtD,yBAEF,wBAAIT,UAAWC,IAAOM,SACpB,uBAAGC,KAAK,2BAA2BR,UAAWC,IAAOQ,SAArD,wBAEF,wBAAIT,UAAWC,IAAOM,SACpB,uBAAGC,KAAK,qCAAqCE,IAAI,KAAKV,UAAWC,IAAOQ,SAAxE,mBAEF,wBAAIT,UAAWC,IAAOM,SACpB,uBAAGC,KAAK,4BAA4BR,UAAWC,IAAOQ,SAAtD,kBChBNE,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACtB,kBAAC,IAAD,CACEC,MAAK,aAULC,OAAQ,SAAAC,GAAI,OACV,6BACE,kBAAC,IAAD,CACEC,MAAOD,EAAKE,KAAKC,aAAaF,MAC9BG,KAAM,CACJ,CAAEC,KAAM,cAAeC,QAASN,EAAKE,KAAKC,aAAaI,gBAG3D,kBAACC,EAAA,EAAD,CAAQP,MAAOD,EAAKE,KAAKC,aAAaF,QACrCJ,EACD,kBAAC,EAAD,WAMRD,EAAgBa,UAAY,CAC1BZ,SAAUa,IAAUC,KAGPf,Q,0CC4CFE,GAFEc,UAzEG,SAAC,GAAD,IAAGZ,EAAH,EAAGA,KAAH,OAChB,kBAACa,EAAD,KACE,kBAACxB,EAAA,EAAD,KACE,kBAAC,IAAD,CAAQY,MAAK,qBAAgBD,EAAKE,KAAKC,aAAaF,SACpD,wCACA,iCACE,yBAAKa,IAAKC,IAAY9B,UAAWC,IAAO,eAAgB8B,MAAM,MAAMC,IAAI,iBACxE,kDACsB,uBAAGxB,KAAK,6BAAR,eADtB,iDAEuB,uBAAGA,KAAK,2BAAR,2BAFvB,yEAGgD,uBAAGA,KAAK,6BAAR,QAHhD,2DAGoJ,uBAAGA,KAAK,sBAAR,MAHpJ,0EAOF,iCACE,mVAGyC,uBAAGA,KAAK,kBAAR,QAHzC,KAG4E,uBAAGA,KAAK,yBAAR,UAH5E,SAG4H,uBAAGA,KAAK,uBAAR,QAH5H,4BAI2B,uBAAGA,KAAK,gCAAR,iBAJ3B,QAIwF,uBAAGA,KAAK,iDAAR,iBAJxF,OAIqK,uBAAGA,KAAK,0BAAR,OAJrK,KAMA,+UAKA,qWAMA,2GAC+E,uBAAGA,KAAK,+CAA8C,uEADrI,sCAIA,2CAEA,2MAIA,iFAIA,gDAEA,mDACuB,uBAAGA,KAAK,mCAAR,eADvB,uEACoJ,uBAAGA,KAAK,wBAAR,SADpJ,uTAMA,+DACmC,uBAAGA,KAAK,+BAAR,gBADnC,qGAE0D,uBAAGA,KAAK,sCAAR,iBAF1D,uDAIA,gFACoD,uBAAGA,KAAK,0BAAR,UADpD,sIAEkD,uBAAGA,KAAK,4BAAR,gBAFlD,oPAMA,2TAWU,c,qBClFlBX,EAAOC,QAAU,CAAC,WAAa","file":"component---src-pages-index-js-3d1ed8002559102de2a3.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"index-module--footer--329-w index-module--header--239p4 index-module--splash--1yZ5-\",\"logo\":\"index-module--logo--38B_c index-module--logo--1kTSE\",\"h2\":\"index-module--h2--1Zc31 index-module--splash-text--1UccB\",\"navList\":\"index-module--nav-list--ONep3\",\"navItem\":\"index-module--nav-item--F2mv0\",\"navLink\":\"index-module--nav-link--1VqZy index-module--nav-link--atajS index-module--splash-link--1qjm- index-module--splash-text--1UccB\"};","module.exports = __webpack_public_path__ + \"static/adamstegman-b412eefd898d7b15626d379c977a4189.jpg\";","import React from 'react';\n\nimport { ReactComponent as Atom } from '../../assets/atom.svg';\nimport Container from '../Container';\nimport styles from './index.module.css';\n\nconst Footer = () => (\n  <footer className={styles.footer}>\n    <Atom className={styles.logo} />\n    <Container>\n      <h2 className={styles.h2}>Contact</h2>\n      <nav>\n        <ul className={styles.navList}>\n          <li className={styles.navItem}>\n            <a href=\"//twitter.com/adamstegman\" className={styles.navLink}>Follow me on Twitter</a>\n          </li>\n          <li className={styles.navItem}>\n            <a href=\"//github.com/adamstegman\" className={styles.navLink}>Follow me on Github</a>\n          </li>\n          <li className={styles.navItem}>\n            <a href=\"//profiles.google.com/adam.stegman\" rel=\"me\" className={styles.navLink}>Google Profile</a>\n          </li>\n          <li className={styles.navItem}>\n            <a href=\"mailto:me@adamstegman.com\" className={styles.navLink}>Email me</a>\n          </li>\n        </ul>\n      </nav>\n    </Container>\n  </footer>\n);\n\nexport default Footer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { StaticQuery, graphql } from 'gatsby';\nimport Header from '../Header';\nimport Footer from '../Footer';\n\nconst TemplateWrapper = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `}\n    render={data => (\n      <div>\n        <Helmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: 'description', content: data.site.siteMetadata.description },\n          ]}\n        />\n        <Header title={data.site.siteMetadata.title} />\n        {children}\n        <Footer />\n      </div>\n    )}\n  />\n)\n\nTemplateWrapper.propTypes = {\n  children: PropTypes.any,\n}\n\nexport default TemplateWrapper\n","import React from 'react';\nimport Helmet from 'react-helmet';\nimport { graphql } from 'gatsby';\nimport Container from '../components/Container';\nimport Layout from '../components/Layout';\nimport profilePic from '../assets/adamstegman.jpg';\nimport styles from './index.module.css';\n\nconst IndexPage = ({ data }) => (\n  <Layout>\n    <Container>\n      <Helmet title={`About Me - ${data.site.siteMetadata.title}`}></Helmet>\n      <h2>About Me</h2>\n      <section>\n        <img src={profilePic} className={styles['profile-pic']} width=\"200\" alt=\"Adam Stegman\" />\n        <p>\n          I work remotely for <a href=\"http://www.onemedical.com\">One Medical</a> from Fort Worth, Texas.\n          I got my BS in CS at <a href=\"http://www.k-state.edu/\">Kansas State University</a> and graduated in 2009.\n          I've worked in several languages, but I enjoy <a href=\"http://www.ruby-lang.org/\">Ruby</a> the most currently, with interest in the simplicity of <a href=\"https://golang.org\">Go</a>.\n          I like to work on distributed systems using agile and XP practices.\n        </p>\n      </section>\n      <section>\n        <p>\n          Most of my web work has been in Ruby on Rails, and I enjoy the core web technologies of HTML, CSS, and JavaScript.\n          I also gravitate to the other side of the stack, setting up repeatable, consistent server environments that are fully automated and continuously deployed.\n          I've done that using devops tools like <a href=\"http://bosh.io\">BOSH</a>, <a href=\"https://www.packer.io\">Packer</a>, and <a href=\"https://www.chef.io\">Chef</a>,\n            deploying systems like <a href=\"https://www.cloudfoundry.org\">Cloud Foundry</a> and <a href=\"https://www.elastic.co/products/elasticsearch\">Elasticsearch</a> to <a href=\"https://aws.amazon.com\">AWS</a>.\n        </p>\n        <p>\n          I appreciate clever systems architecture and operations-aware engineering.\n          My favorite approach to work is dipping my fingers in every pie and helping co-workers solve their problems.\n          Additionally, I love learning, but mostly applying clever, cleaner ways to do things, especially when I can delete code.\n        </p>\n        <p>\n          I'm an evangelist for documentation and best practices.\n          I enjoy ensuring things are complete&mdash;documented, tested, released, and supported.\n          The opposite rubs me the wrong way&mdash;a lack of documentation, hard-to-find resources, or ugly code.\n          I don't like to let bad code sit and try to keep code I touch cleaner than how I found it.\n        </p>\n        <p>\n          I highly value companies that buy into agile at every level of the business. <a href=\"https://www.youtube.com/watch?v=Mpsn3WaI_4k\"><q>Agile at scale requires trust at scale,</q></a> and that is very hard to achieve.\n        </p>\n\n        <h3>Preferences</h3>\n\n        <p>\n          I use things that enable me, like a clean, fast text editor and the terminal.\n          That means tools like Rake and BOSH help me accomplish my work by automating repetitive tasks.\n        </p>\n        <p>\n          Configuration must be avoided as much as possible.\n        </p>\n\n        <h3>A little history</h3>\n\n        <p>\n          I started working at <a href=\"http://www.onemedical.com/jobs/\">One Medical</a> in 2015 on the electronic medical record and provider application, <a href=\"/projects/1life.html\">1life</a>.\n          Lately I've been working on improving our clinical team workflows.\n          Previous to that I helped migrate much of our infrastructure from Heroku and hosted services to Amazon Web Services.\n          The first projects I worked on at One Medical were around clinical compliance with new standards and member registration.\n        </p>\n        <p>\n          In 2013 I accepted an offer from <a href=\"http://www.pivotallabs.com/\">Pivotal Labs</a> and moved to the San Francisco bay area.\n          After a few months of client projects I started work on <a href=\"http://cloudfoundry.org/index.html\">Cloud Foundry</a>, where I worked on services, BOSH, and operations.\n        </p>\n        <p>\n          Previously, I lived in Kansas City and worked for <a href=\"http://www.cerner.com/\">Cerner</a> for five years writing web applications and services at every level of the stack.\n          When I started, I helped build and maintain the <a href=\"https://store.cerner.com\">Cerner Store</a> for a couple years.\n          Then I moved to writing services focused on clinical search for a new, distributed architecture.\n          My final year at Cerner was spent working to rapidly prototype and build a suite of web applications for a new initiative.\n        </p>\n        <p>\n          I started with simple MUD-like dungeons written in QBasic when I was a child and moved on to more complex, but useful, .NET applications in college.\n          New ideas and projects excite me to no end, though it's always been challenging to drive a project through to a polished end-state.\n        </p>\n      </section>\n    </Container>\n  </Layout>\n);\n\nexport default IndexPage;\n\nexport const query = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePic\":\"index-module--profile-pic--1H3AK\"};"],"sourceRoot":""}